@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;
@using static STIMULUS_V2.Client.Shared.NoeudComponents.Connector;

@inject IJSRuntime JSRuntime
@inject Radzen.DialogService RadzenDialogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject INoeudService NoeudService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IPageService PageService
@inject IGrapheService GrapheService
@inject IComposantService ComposantService
@inject IEtudiantService EtudiantService
@inject INoeudEtudiantService NoeudEtudiantService
@inject IGroupeEtudiantService GroupeEtudiantService
@inject AppState State;
@inject Radzen.DialogService DialogService
@inject RerenderService Rerender

@for (int i = 0; i < Nodes.Count; i++)
{
    @if (Node.NoeudId == Nodes[i].NoeudParentId && Nodes[i].NoeudParentId != null && Nodes[i].NoeudParentId != Nodes[i].NoeudId)
    {
        <Connector ReRender="ReRender" GetModeDeVue="GetModeDeVue" SaveChangeNoeud="SaveChangeNoeud" Noeud="Nodes[i]" X1=Node.PosX Y1=Node.PosY X2=Nodes[i].PosX Y2=Nodes[i].PosY />
    }
}

<Draggable GetModeDeVue="GetModeDeVue" @bind-X=Node.PosX @bind-Y=Node.PosY>
    <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(0,0,0,5); opacity:0.5" />
    @if (GetModeDeVue() == 2)
    {
        <circle @onmouseup=@(e => SaveChangeNoeud(Node)) @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) @onclick="(e => RelinkBindNode(Node))" r="@Node.Rayon" class="cercle" style="fill:@COULEUR_BLOQUER" />
    }
    @if (GetModeDeVue() == 2)
    {
        <rect x="@((int)Math.Ceiling((double)(sizeValue*2- sizeValue/2 -10)))" y="@((int)Math.Ceiling((double)(-180 + sizeValue/2)))" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
        <foreignObject x="@((int)Math.Ceiling((double)sizeValue*2- Node.Rayon/2 -10))" y="@((int)Math.Ceiling((double)(-180 + sizeValue/2)))" visibility="@displayHover" width="200" height="150" style="padding:5px">
            <span> Nom :  @Node.Nom </span><br />
            <span>Parent : @TestParent()</span><br /> @*Pour ne pas avoir de champ vide*@
            <span> Desc : @Node.Description</span><br />
            <span> Type : @Node.Type </span>
        </foreignObject>
    }
    @if (GetModeDeVue() == 2)
    {
        @if(Nodes.Count > 1){
            @if (Nodes.Where(c => c.NoeudParentId == Node.NoeudId).ToList().Count == 0 || Node.NoeudId == Node.NoeudParentId)
            {
                <foreignObject x="@(-sizeValue/2 -20)" y="@(-sizeValue)" width="20" height="20">
                    <span id="deleteNoeud" title="Supprimer le noeud @Node.Nom" class="oi oi-circle-x" aria-hidden="true" @onclick="@SupprimerNoeud"
              style="display: block; text-anchor: middle; dominant-baseline: middle; text-align: center;">
                    </span>
                </foreignObject>

            }
        }

        <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
        @if(Node.Status == 1)
        {
            <span title="Débloquer le noeud @Node.Nom" id="LockAndUnlocked" class="oi oi-lock-locked" aria-hidden="true" @onclick="(e => LockAndUnlocked(Node))"></span>
        }
        else if (Node.Status == 2)
        {
                <span title="Bloquer le noeud @Node.Nom" id="LockAndUnlocked" class="oi oi-lock-unlocked" aria-hidden="true" @onclick="(e => LockAndUnlocked(Node))"></span>
        }
            else if ((graphe != null) && (graphe.Status != null) && (graphe.Status == GrapheStatus.ACTIVER) && Node.Status == 0)
        {
                <span title="Désactiver le graphe" id="LockAndUnlockedGraphe" class="oi oi-lock-unlocked" aria-hidden="true" @onclick="(e => LockAndUnlockedGraphe(Node))"></span>
        }
            else if ((graphe != null) && (graphe.Status != null) && (graphe.Status == GrapheStatus.DESACTIVER) && Node.Status == 0)
        {
                <span title="Activer le graphe" id="LockAndUnlockedGraphe" class="oi oi-lock-locked" aria-hidden="true" @onclick="(e => LockAndUnlockedGraphe(Node))"></span>
        }
        </foreignObject>

        @if (Node.NoeudParentId == null || Node.NoeudId == Node.NoeudParentId)
        {
            if(Node.Status != 0)
            {
                <foreignObject x="@(-sizeValue)" y="@(sizeValue/2)" width="20" height="20">
                    <span class="oi oi-link-broken" id="reLink" @onclick="(e => ReLinkNoeud(Node))"></span>
                </foreignObject>
            }
        }
        <foreignObject x="@(sizeValue -20)" y="@(sizeValue/2)" width="20" height="20">
            @if (!isOpen)
            {
                <span title="Ajouter un nouveau noeud a @Node.Nom" id="addNoeud" class="oi oi-plus" aria-hidden="true" @onclick="@NouveauNoeud"></span>
            }
            else
            {
                <span title="Ajouter un nouveau noeud a @Node.Nom" id="addNoeud" class="oi oi-minus" aria-hidden="true" @onclick="@FermeForm"></span>
            }
        </foreignObject>
        @if (isOpen)
        {
            <rect x="@(sizeValue)" y="@(sizeValue)" width="250" height="445" style="fill: rgba(0, 0, 0, 0.8); stroke: black; stroke-width: 1; rx: 10; ry: 10;z-index: 1000;" />
            <foreignObject x="@(Node.Rayon )" y="@(Node.Rayon)" width="250" height="445" style="padding:5px">
                <EditForm Model="nouveauNoeud" OnSubmit="AjoutNoeud" class="formLogin">
                    <div class="form-group">
                        <label for="nomNoeud"><h5>Nom du noeud :</h5></label>
                        <InputText type="text" class="form-control" id="nomNoeud" @bind-Value="nouveauNoeud.Nom" />
                    </div>
                    <div class="form-group">
                        <label for="description"><h5>Description :</h5></label>
                        <InputTextArea type="text" class="form-control" id="description" @bind-Value="nouveauNoeud.Description" />
                    </div>
                    <div class="form-group">
                        <label for="rayon"><h5>Rayon :</h5></label>
                        <InputNumber type="number" class="form-control" id="rayon" min="40" max="80" placeholder="40-80" @bind-Value="nouveauNoeud.Rayon" />
                    </div>
                    <div class="form-group">
                        <label for="status"><h5>Status :</h5></label>
                        <select class="form-control" id="status" @bind="nouveauNoeud.Status">
                            <option value="1" selected="@(nouveauNoeud.Status == 1)">Bloqué</option>
                            <option value="2" selected="@(nouveauNoeud.Status == 2)">Débloqué</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="modelNoeud"><h5>Modèle de Noeud :</h5></label>
                        <select class="form-control" id="modelNoeud" @bind="modelNoeud">
                            <option value="CONTENU">Noeud Contenu</option>
                            <option value="STRUCTURE">Noeud Structure</option>
                        </select>
                    </div>
                    <div class="form-group" style="text-align: center;">
                        <button style="margin-top: 10px" type="submit" class="btn btn-primary btn-lg w-100">Ajouter</button>
                    </div>
                </EditForm>
            </foreignObject>
        }
        
    }
    @if (GetModeDeVue() == 1)
    {
        <NavLink @onclick="ViewPageTemplate">
            <circle r="@Node.Rayon" class="cercle" style="fill:@COULEUR_BLOQUER" />
            @if (Node.Type == NoeudType.CONTENU)
            {
                <foreignObject x="@((-sizeValue) )" y="@((sizeValue)/2 )" width="20" height="20">
                    <span title="Aller vers l'édition" class="oi oi-book" id="reLink" @onclick="DirectionPages"></span>
                </foreignObject>
                <foreignObject x="@(sizeValue -20)" y="@(sizeValue/2)" width="20" height="20">
                <span title="Ajouter une nouvelle page à @Node.Nom" id="addNoeud" class="oi oi-plus" aria-hidden="true" @onclick="@(args => AjoutPage(Node.NoeudId))"></span>
                </foreignObject>
            }
            <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) class="textLink" text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>

        <rect x="@((int)Math.Ceiling((double)(sizeValue*2- sizeValue/2 -10)))" y="@((int)Math.Ceiling((double)(-100 + sizeValue/2)))" visibility="@displayHover" width="200" height="50" style="fill: rgba(255,255,255,255)" />
        <foreignObject x="@((int)Math.Ceiling((double)sizeValue*2- Node.Rayon/2 -10))" y="@((int)Math.Ceiling((double)(-100 + sizeValue/2)))" visibility="@displayHover" width="200" height="150" style="padding:5px">
            <span> Nombre de page(s) :  @listePage.Count() </span><br />
        </foreignObject>
        if (viewPage)
        {
            int offsetX = 0;
            int offsetY = 0;

            @foreach (var pageAffichage in listePage.OrderBy(c => c.Ordre))
            {
                <rect x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX)" y="@(-180 + Node.Rayon / 2 + offsetY)" width="85" height="105" style="fill: rgba(255,255,255,255); stroke: black; stroke-width: 2;" />
                <foreignObject x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX + 80)" y="@(-180 + Node.Rayon / 2 + offsetY - 12)" width="20" height="20">
                    <span id="deleteNoeud" title="Supprimer la page @pageAffichage.Ordre" class="oi oi-circle-x" aria-hidden="true" @onclick="@(e => SupprimerPage(pageAffichage.PageId))"></span>
                </foreignObject>
                <foreignObject x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX - 15)" y="@(-180 + Node.Rayon / 2 + offsetY + 87)" width="20" height="20">
                    <span id="AssocierPage" title="Changer la page @pageAffichage.Ordre de noeud" class="oi oi-action-undo" aria-hidden="true" @onclick="@(e => ReLinkPage(pageAffichage))"></span>
                </foreignObject>
                <foreignObject @onclick="@(e => DirectionPage(pageAffichage.PageId))" x="@(Node.Rayon * 2 - Node.Rayon / 2 - 10 + offsetX)" y="@(-180 + Node.Rayon / 2 + offsetY)" width="70" height="110" style="padding:5px;">
                    <span>#@pageAffichage.Ordre</span>
                </foreignObject>

                offsetX += 30;
                offsetY += 30;
            }
        }
    }
    else if (GetModeDeVue() == 2)
    {
        <NavLink>
            <text @onclick=@(e => RelinkBindNode(Node)) @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) class="textLink" text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
        </NavLink>
    }
    else if (GetModeDeVue() == 3)
    {
        @if (noeudEtudiant != null && (
           ((noeudEtudiant.Status == 0) ||
           (noeudEtudiant.Status == 5) ||
           (noeudEtudiant.Status == 1))))
            {
            <NavLink id="lien" @onclick="DirectionPagesEtudiant">
                    <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(255,255,255,5); opacity:0.5" />
                    <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
                    <rect x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
                    <foreignObject x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
                        <span> Nom :  @Node.Nom</span><br />
                        <span> Desc : @Node.Description</span><br />
                        @if (noeudEtudiant.Status == 5)
                        {
                            <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                <span title="Bloqué" class="oi oi-lock-locked" aria-hidden="true"></span>
                            </foreignObject>
                            <strong>@noeudEtudiant.CodeDA doit compléter <h>"@TestParent()"</h> pour débloquer ce noeud.</strong>
                        }
                        else if (noeudEtudiant.Status == 1)
                        {
                            <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                <span title="Bloqué" class="oi oi-ban" aria-hidden="true"></span>
                            </foreignObject>
                            <strong>Vous avez bloqué cette théorie.</strong>
                        }
                        else if (noeudEtudiant.Status == 0)
                        {
                            if (graphe.Status == GrapheStatus.ACTIVER)
                            {
                                <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                    <span title="Bloqué" class="oi oi-book" aria-hidden="true"></span>
                                </foreignObject>
                                <strong>Ce graphe peut être complété !</strong>
                            }
                            else
                            {
                                <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                    <span title="Bloqué" class="oi oi-ban" aria-hidden="true"></span>
                                </foreignObject>
                                <strong>Ce graph a été bloqué par votre professeur</strong>
                            }
                        }
                    </foreignObject>
                    <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
                </NavLink>
            }
            else if (noeudEtudiant != null && (
            ((noeudEtudiant.Status == 2) ||
            (noeudEtudiant.Status == 3) ||
            (noeudEtudiant.Status == 4))))
            {
                <NavLink @onclick="DirectionPagesEtudiant" id="lien">
                    <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) r="@Node.Rayon" class="cercle" style="fill:@Couleur" />
                    <rect x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
                    <foreignObject x="@(Node.Rayon*2- Node.Rayon/2 -10)" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
                        <span> Nom :  @Node.Nom</span><br /> @*Pour ne pas avoir de champ vide*@
                        <span> Desc : @Node.Description</span><br />
                        @if (noeudEtudiant.Status == 2)
                        {
                            <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                <span title="Bloqué" class="oi oi-circle-x" aria-hidden="true"></span>
                            </foreignObject>
                            <strong>Cette théorie n'a pas été complété.</strong>
                        }
                        else if (noeudEtudiant.Status == 3)
                        {
                            <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                <span title="Bloqué" class="oi oi-magnifying-glass" aria-hidden="true"></span>
                            </foreignObject>
                            <strong>Cette théorie est en cours de complétion</strong>
                        }
                        else if (noeudEtudiant.Status == 4)
                        {
                            if (Node.Type == NoeudType.STRUCTURE)
                            {
                                <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                    <span title="Bloqué" class="oi oi-lock-unlocked" aria-hidden="true"></span>
                                </foreignObject>
                                <strong>@noeudEtudiant.CodeDA a débloquer cette catégorie</strong>
                            }
                            else
                            {
                                <foreignObject x="@(Node.Rayon)" y="@(-Node.Rayon )" width="20" height="20">
                                    <span title="Bloqué" class="oi oi-circle-check" aria-hidden="true"></span>
                                </foreignObject>
                                <strong>Cette théorie a été complété.</strong>
                            }
                        }
                    </foreignObject>
                    <text @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) text-anchor="middle" alignment-baseline="central">@Node.Nom</text>
                </NavLink>
            }
            else
            {
                <p>Chargement du graphe ...</p>
            }
    }
</Draggable>

@code {
    private bool delete = false;
    [Parameter]
    public EventCallback OnStatusUpdated { get; set; }
    //ChildContent = Noeudception
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Noeud Node { get; set; }
    [Parameter] public Page newPage { get; set; } = new();
    [Parameter] public Page LinkedPage { get; set; } = new();
    [Parameter] public List<Noeud> Nodes { get; set; }
    [Parameter] public List<string> Etudiant { get; set; }

    //Delegate Land
    [Parameter] public Action<Noeud> AjoutNouveauNoeud { get; set; }
    [Parameter] public Action<int> SupprNoeud { get; set; }
    [Parameter] public Action<int> NoeudValueFormOpen { get; set; }
    [Parameter] public Action<Noeud> SaveChangeNoeud { get; set; }
    [Parameter] public Action<Noeud> RelinkBindNode { get; set; }
    [Parameter] public Action<Noeud> ReLinkNoeud { get; set; }
    [Parameter] public Func<Noeud, Task<bool>> ReLinkBindPage { get; set; }
    [Parameter] public Action<Page> ReLinkPage { get; set; }
    [Parameter] public Func<int> GetModeDeVue { get; set; }
    [Parameter] public Func<Task> UpdateGraphe { get; set; }

    private string displayHover = "hidden";
    private bool viewPage = false;

    //Type de noeud
    private string modelNoeud = "CONTENU";
    private string statusNom = "";
    private Noeud nouveauNoeud = new();
    private Graphe graphe { get; set; }
    private Noeud_Etudiant noeudEtudiant = new();
    private bool isOpen = false;
    private bool pageLink = false;
    private int newPageId;
    private int sizeValue;

    //Variable couleurs
    private readonly string COULEUR_BLOQUER = "rgb(140,140,140)";
    private readonly string COULEUR_NON_COMPLETER = "rgb(204, 0, 0)";
    private readonly string COULEUR_EN_COURS = "rgb(199,160, 53)";
    private readonly string COULEUR_COMPLETER = "rgb(0, 204, 0)";
    private string Couleur { get; set; }
    public List<Page> listePage { get; set; } = new List<Page>();

    protected override async Task OnInitializedAsync()
    {
        // Vers le haut
        sizeValue = (int)Math.Ceiling(Node.Rayon);
        if (sizeValue % 2 != 0)
            sizeValue++;

        Couleur = COULEUR_BLOQUER;
        var grapheActuel = await GrapheService.Get(await sessionStorage.GetItemAsync<int>("idGraphe"));
        graphe = grapheActuel.Data;

        Rerender.OnEtudiantChanged += ReRenderDataNoeudEtudiant;

        if(await sessionStorage.GetItemAsync<string>("daEtudiant") != null)
        {
            await GetDataNoeudEtudiant();
        }
        var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
        var affichPage = pageNoeud.Data;
        nouveauNoeud.Rayon = 40;
        listePage.AddRange(affichPage);
        StateHasChanged();

    }
    private async Task GetDataNoeudEtudiant()
    {
        try
        {
            var etudiantData = await NoeudEtudiantService.GetByNoeudAndDa(Node.NoeudId, await sessionStorage.GetItemAsync<string>("daEtudiant"));

            if (etudiantData != null)
            {
                noeudEtudiant = etudiantData.Data;
                UpdateChildrenColors();
            }
            else
                UpdateChildrenColors();
        }
        catch { }
    }

    private async void ReRenderDataNoeudEtudiant()
    {
        try
        {
            await GetDataNoeudEtudiant();
            StateHasChanged();
        }
        catch { }
    }
    private async void ViewPageTemplate()
    {
        if (!viewPage)
        {
            // Ajoutez ici l'appel à la fonction ReLinkBindPage avant d'afficher et trier les pages
            await ReLinkBindPage(Node); //erreur 404
            var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
            var affichPage = pageNoeud.Data.ToList();
            affichPage = affichPage.OrderBy(p => p.Ordre).ToList();

            // Met à jour les valeurs de la propriété Ordre de manière séquentielle
            for (int i = 0; i < affichPage.Count(); i++)
            {
                affichPage[i].Ordre = i + 1;
                PageService.Update(affichPage[i].PageId, affichPage[i]);

            }

            listePage.Clear();
            listePage.AddRange(affichPage);
            StateHasChanged();
            viewPage = true;
        }
        else
        {
            viewPage = false;
        }
    }

    /// <summary>
    /// (Visuel) permet de check si le noeud a un parent, et l'affiche dans le bulle d'info du noeud
    /// </summary>
    /// <returns></returns>
    private string TestParent()
    {
        if (Node.NoeudParent != null && Node.NoeudParent.Nom != null)
        {
            return Node.NoeudParent.Nom.ToString();
        }
        else
        {
            return "Aucun";
        }
    }
    /// <summary>
    /// Quand le formulaire d'ajout est valide, ajoute un noeud
    /// </summary>
    private async void AjoutNoeud()
    {
        nouveauNoeud.GrapheId = await sessionStorage.GetItemAsync<int>("idGraphe");
        nouveauNoeud.PosX = Node.PosX;
        nouveauNoeud.PosY = Node.PosY + 180;
        nouveauNoeud.NoeudParentId = Node.NoeudId;
        nouveauNoeud.Obligatoire = true;
        nouveauNoeud.Disponibilite = DateTime.Now;
        if(modelNoeud == "STRUCTURE")
            nouveauNoeud.Type = NoeudType.STRUCTURE;
        else
            nouveauNoeud.Type = NoeudType.CONTENU;

        bool error = false;
        string retour = "";
        if (nouveauNoeud.Nom == null)
        {
            error = true;
            retour += "Le noeud n'a pas de nom\n";
        }
        else if (nouveauNoeud.Nom.Length < 3 || nouveauNoeud.Nom.Length > 10)
        {
            error = true;
            retour += $"Le nom doit être compris entre 3 et 10 caractères (actuellement : {nouveauNoeud.Nom.Length})\n";
        }
        if (nouveauNoeud.Description == null)
        {
            error = true;
            retour += "Le noeud n'a pas de description\n";
        }
        else if (nouveauNoeud.Description.Length < 3 || nouveauNoeud.Description.Length > 100)
        {
            error = true;
            retour += $"La description doit être comprise entre 3 et 100 caractères (actuellement : {nouveauNoeud.Description.Length})\n";
        }
        if (nouveauNoeud.Rayon == null)
        {
            error = true;
            retour += "Le noeud n'a pas de rayon\n";
        }
        else if(nouveauNoeud.Rayon.ToString().Contains(",") || nouveauNoeud.Rayon.ToString().Contains("."))
        {
            error = true;
            retour += "Le rayon contient un caractere non autorise";
        }
        if (!error)
        {
            AjoutNouveauNoeud(nouveauNoeud);            
        }
        else
        {
            await JsRunTime.InvokeAsync<object>("alert", retour);
        }

        // Dans le cadre de champs vide ou invalide, une alert box apparait
        nouveauNoeud = new();

        isOpen = false;
    }
    private async Task LockAndUnlocked(Noeud noeud)
    {

        if (noeud.Status == 1)
        {
            Node.Status = 2;
            await NoeudService.Update(Node.NoeudId, Node);
        }
        else
        {
            var result = await DialogService.Confirm("Êtes vous sûr de vouloir bloquer ce noeud ? Cette action entrainera une réinitialisation de la progression pour ce noeud.", "Bloquer le noeud : " + noeud.Nom);
            if (result.HasValue && result.Value)
            {
                Node.Status = 1;
                await NoeudService.Update(Node.NoeudId, Node);
            }
        }
        await OnStatusUpdated.InvokeAsync();
        Rerender.TriggerNoeudProf();
        StateHasChanged();
    }
    private async Task LockAndUnlockedGraphe(Noeud noeud)
    {
        if (graphe.Status == GrapheStatus.ACTIVER)
        {
            var result = await DialogService.Confirm("Êtes vous sûr de vouloir bloquer ce graphe ? Cette action entrainera une réinitialisation de la progression pour ce graphe.", "Bloquer le graphe: " + graphe.Nom);
            if (result.HasValue && result.Value)
            {
                graphe.Status = GrapheStatus.DESACTIVER;
                await GrapheService.Update(graphe.GrapheId, graphe);
            }    
        }
        else
        {
                graphe.Status = GrapheStatus.ACTIVER;
                await GrapheService.Update(graphe.GrapheId, graphe);         
        }
        await OnStatusUpdated.InvokeAsync();
        Rerender.TriggerNoeudProf();
        StateHasChanged();
    }

    private async Task AjoutPage(int id)
    {
        // Récupère toutes les pages du nœud avant l'ajout
        var pageNoeudBefore = await PageService.GetAllFromNoeud(id);
        var createBefore = pageNoeudBefore.Data;



        // Initialise une nouvelle page
        newPage.NoeudId = id;
        newPage.ImportanceId = 1;

        if (createBefore != null)
        {
            // Si des pages existent déjà, organise la valeur de la propriété Ordre de manière séquentielle
            newPage.Ordre = createBefore.Count() + 1;
        }
        else
        {
            // Si aucune page n'existe, initialise la valeur de la propriété Ordre à 1
            newPage.Ordre = 1;
        }

        // Crée la nouvelle page
        var nouvPage = await PageService.Create(newPage);
        var nouvellePage = nouvPage.Data;
        await sessionStorage.SetItemAsync<int>("idPage", nouvellePage.PageId);
        // Récupère toutes les pages du nœud après l'ajout
        var pageNoeudAfter = await PageService.GetAllFromNoeud(id);
        var affichPage = pageNoeudAfter.Data.ToList();

        // Trie les pages en fonction de la propriété Ordre
        affichPage = affichPage.OrderBy(p => p.Ordre).ToList();

        // Met à jour les valeurs de la propriété Ordre de manière séquentielle
        for (int i = 0; i < affichPage.Count(); i++)
        {
            affichPage[i].Ordre = i + 1;
            PageService.Update(affichPage[i].PageId, affichPage[i]);
        }
        
        // Met à jour la liste des pages
        listePage.Clear();
        listePage.AddRange(affichPage);

        // Active l'affichage des pages
        viewPage = true;

        // Met à jour l'affichage
        StateHasChanged();
    }

    /// <summary>
    /// Appel la fonction en delegate de suppression de noeud
    /// </summary>
    private void SupprimerNoeud()
    {
        SupprNoeud(Node.NoeudId);
    }

    /// <summary>
    /// Affiche le formulaire pour un nouveau noeud
    /// </summary>
    private void NouveauNoeud()
    {
        //Base du nouveau noeud
        isOpen = true;
    }

    /// <summary>
    /// Rend le formulaire d'ajout de noeud invisible
    /// </summary>
    private void FermeForm()
    {
        isOpen = false;
    }

    private async void SupprimerPage(int id)
    {
        var allComposant = await ComposantService.GetAllById(id);
        var composants = allComposant.Data;

        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer cette page ? elle contient : "+ composants.Count()+ " composants", "Supprimer");

        if (result.HasValue && result.Value)
        {
            //Delete tous les composants

            foreach (var deleteComposant in composants)
            {
                await ComposantService.Delete(deleteComposant.ComposantId);
            }

            //ReOrderPage
            var AllPage = await PageService.Get(id);
            var livePage = AllPage.Data;

            foreach (var reOrdered in listePage)
            {
                if (livePage.Ordre < reOrdered.Ordre)
                {
                    reOrdered.Ordre = reOrdered.Ordre - 1;
                    await PageService.Update(reOrdered.PageId, reOrdered);
                }
            }

            await PageService.Delete(id);
            listePage.Clear();
            var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
            var affichPage = pageNoeud.Data.ToList();
            listePage.AddRange(affichPage);
            StateHasChanged();
        }
        else
        {
            
        }
    }

    /// <summary>
    /// Quand on survole un noeud, ses elements lies apparaissent
    /// </summary>
    private void OnMouseHover() => displayHover = "visible";

    /// <summary>
    /// Quand on survole plus un noeud, ses elements lies apparaissent disparait
    /// </summary>
    private void OnMouseLeave() => displayHover = "hidden";

    /// <summary>
    /// Permet de refaire de rendu d'un composant
    /// </summary>
    private void ReRender()
    {
        StateHasChanged();
    }

    /// <summary>
    /// Permet le changement de page en fonction du noeud choisis
    /// </summary>
    private async Task DirectionPages()
    {
        await sessionStorage.SetItemAsync<int>("idNoeud", Node.NoeudId);

        if (listePage.Count() == 0)
        {
            await AjoutPage(await sessionStorage.GetItemAsync<int>("idNoeud"));
        }
        else
        {
            var firstPage = listePage.FirstOrDefault();
            await sessionStorage.SetItemAsync<int>("idPage", firstPage.PageId);
        }
        NavigationManager.NavigateTo("/ModifierPages");
    }

    private async void DirectionPage(int id)
    {
        var getPage = await PageService.Get(id);
        var pageNoeud = getPage.Data;

        await sessionStorage.SetItemAsync<int>("idPage", id);
        await sessionStorage.SetItemAsync<int>("idNoeud", (int)pageNoeud.NoeudId);
        NavigationManager.NavigateTo("/ModifierPages");
    }

    private async void DirectionPagesEtudiant()
    {
        await sessionStorage.SetItemAsync<int>("idNoeud", Node.NoeudId);

        // Récupérer toutes les pages associées au nœud actuel
        var pageNoeud = await PageService.GetAllFromNoeud(Node.NoeudId);
        var affichPage = pageNoeud.Data;

        if (affichPage != null && affichPage.Any())
        {
            // Trouver la page avec l'ordre minimum (la première page)
            var firstPage = affichPage.OrderBy(p => p.Ordre).First();

            // Stocker l'ID de la première page dans la session
            await sessionStorage.SetItemAsync<int>("idPage", firstPage.PageId);
        }
        NavigationManager.NavigateTo("/Pages");
    }

    private void UpdateChildrenColors()
    {
        // Mettez à jour les couleurs des enfants en fonction de leur statut
        // Vous pouvez utiliser une logique similaire à celle que vous avez utilisée dans OnInitializedAsync()

        // Vérifiez si le nœud est un enfant du nœud actuel
        if (noeudEtudiant.Status == 0)
        {
            if (graphe.Status == GrapheStatus.ACTIVER)
            {
                Couleur = "rgb(0,76,153)";
            }
            else
                Couleur = COULEUR_BLOQUER;

        }
        if (noeudEtudiant.Status == 1)
        {
            Couleur = COULEUR_BLOQUER;
        }
        else if (noeudEtudiant.Status == 2)
        {
            Couleur = COULEUR_NON_COMPLETER;
        }
        else if (noeudEtudiant.Status == 3)
        {
            Couleur = COULEUR_EN_COURS;
        }
        else if (noeudEtudiant.Status == 4)
        {
            if (Node.Type == NoeudType.CONTENU)
            {
                Couleur = COULEUR_COMPLETER;
            }
            else
                Couleur = "rgb(0,76,153)";
        }
        else if (noeudEtudiant.Status == 5)
        {
            //Status 5 sera le status bloquer car le noeud parent n'est pas terminé
            Couleur = COULEUR_BLOQUER;
        }
    }
}
