@using Newtonsoft.Json;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.DTOs
@using STIMULUS_V2.Shared.Models.Entities;
@using BlazorMonaco;
@using BlazorMonaco.Editor;
@using BlazorMonaco.Languages;
@using System.Web;
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text.RegularExpressions;

@inject IFichierSauvegardeService FichierSauvegardeService
@inject IExerciceService ExerciceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject IJSRuntime JsRunTime
@inject DialogService DialogService
@inject HttpClient HttpClient


@if (InitDone)
{
    <div>
        <div class="fileSelector d-flex align-items-center">
            @if (FichierCode != null)
            {
                @foreach (Fichier fichier in FichierCode)
                {
                    <div class="file-tab">
                        <button @onclick="() => ChangeTab(fichier.Id)" class="custom-gestion-subtitle" style="color: @(fichier.Css == "focused" ? "white" : "grey")">@((fichier.Nom != null) ? fichier.Nom : "")</button>

                        @if (fichier.Nom != "Program.cs" && fichier.Nom != "program.cs")
                        {
                            // pour permettre la suppression des pages qui ne sont pas Main.py donc on ne peut pas supp le main
                            <button class="close-button" @onclick="() => Delete(fichier.Id)">X</button>
                        }
                    </div>
                }
            }
            else
            {
                <p>Chargement...</p>
            }

            <RadzenButton Click=AlertAddPage Icon="add" class="custom-gestion-subtitle" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
        </div>

        <div class="d-flex justify-content-around">
            <div class="d-flex justify-content-between">
                <div>
                    <StandaloneCodeEditor Id="monaco" ConstructionOptions="EditorConstructionOptions" @ref="_editor" />
                </div>
                @if (FichierCode != null)
                {
                    @foreach (Fichier fichier in FichierCode)
                    {

                        if (fichier.Css != "hidden")
                        {
                            SetCode(@fichier.Contenu);
                        }
                        <textarea class="textareaCode hidden" id="@fichier.Id" cols="50" rows="25" name="@((fichier.Nom != null) ? fichier.Nom : "")" @bind=@fichier.Contenu @bind:event="oninput" @onfocus="() => Tab(fichier.Id)"></textarea>
                    }
                }
                else
                {
                    <p>Chargement...</p>
                }
            </div>
            <div id="background-result">
                <div class="d-flex align-items-center">
                    <p class="custom-gestion-subtitle" style="white-space:pre-wrap; color: white;">@Result</p>

                    @if (csharpLoading == true)
                    {
                        <RadzenProgressBarCircular Style="margin-left:10px;" ProgressBarStyle="ProgressBarStyle.Light" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                    }
                </div>

            </div>
        </div>
    </div>
    <!-- Section bouton -->
    <div class="form-group mt-2 d-flex justify-content-center">
        <RadzenButton Click="Save" Style="background-color: #14274E;" class="custom-creategroup-title" Text="Sauvegarder" Icon="save" ButtonStyle="ButtonStyle.Primary" />
        <RadzenButton Click="Post" Style="background-color: #14274E; margin-left:5px;" class="custom-creategroup-title" Text="Exécuter" Icon="arrow_forward_ios" ButtonStyle="ButtonStyle.Primary" />
    </div>
    <style>
        .focused {
            display: block;
        }

        .hidden {
            display: none;
        }

        .monaco-editor-container { /* for all editor instances */
            height: 600px;
            width: 800px;
        }
    </style>
    @code {
    [Parameter]
    public int Reference { get; set; }
    public string NomFichier { get; set; }
    public bool csharpLoading { get; set; }

    public Exercice exercice { get; set; }

    private StandaloneCodeEditor _editor { get; set; }
    private bool showDeleteConfirmation = false;
    private const string texteDefaut = "using System;\n\n" +
                           "class Program\n" +
                           "{\n" +
                           "\tstatic void Main(string[] args)\n" +
                           "\t{\n" +
                           "\t\tConsole.WriteLine(\"Hello World!\");\n" +
                           "\t}\n" +
                           "}";

    private string TexteDefaut2(string nom)
    {
        if (nom.EndsWith(".cs"))
        {
            // retirer ".cs" à la fin du nom du fichier
            nom = nom.Substring(0, nom.Length - 3);
        }
        return "using System;\n\n" +
                   "internal class " + nom + "\n" +
                   "{\n" +
                   "}";
    }
    /// <summary>
    /// Initialise le composant en allant chercher les fichiers d'ecercice correspondants
    /// </summary>
    protected override async void OnInitialized()
    {
        IdEtudiant = await sessionStorage.GetItemAsync<string>("idConnexion");

        var Exercice = await ExerciceService.Get(Reference);
        exercice = Exercice.Data;

        FichierCode = new List<Fichier>();

        try
        {
            //recupere tous les exercices dans la bd dans fichierSauvegarde
            var fichiersSauvegardesCall = await FichierSauvegardeService.GetAllExercice(exercice.ExerciceId, IdEtudiant);

            var fichier = fichiersSauvegardesCall.Data;

            foreach (var fichierListSauvegarde in fichier)
            {
                FichierCode.Add(new Fichier()
                        {
                            Contenu = fichierListSauvegarde.Contenue,
                            Nom = fichierListSauvegarde.Nom,
                            Id = fichierListSauvegarde.FichierSauvegardeId,
                            Css = HiddenTab
                        });
            }
        }
        catch (Exception e)
        {
            if (FichierCode == null || FichierCode.Count == 0)
            {
                FichierCode.Add(new Fichier()
                        {
                            Contenu = texteDefaut,
                            Nom = "Program.cs",
                            Id = -(FichierCode.Count + 1),
                            Css = HiddenTab
                        });

                int id = -1;
                List<FichierSauvegarde> fichiersSauvegardes = new List<FichierSauvegarde>();

                var fichierSauv = new FichierSauvegarde()
                        {
                            Nom = "Program.cs",
                            Contenue = texteDefaut,
                            Version = DateTime.Now,
                            CodeDA = IdEtudiant,
                            ExerciceId = exercice.ExerciceId
                        };
                try
                {
                    await FichierSauvegardeService.Create(fichierSauv);
                }
                catch (Exception ea)
                {
                    Console.WriteLine(ea.Message);
                }

                StateHasChanged();
            }
        }
        InitDone = true;
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task<string> GetCode()
    {
        string code = "-1";
        if (_editor != null)
        {
            code = await _editor.GetValue();
        }
        return code;
    }


    private async Task SetCode(string code = texteDefaut)
    {
        if (_editor != null)
            await _editor.SetValue(code);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
                {
                    AutomaticLayout = true,
                    Language = "csharp",  // Modifier ici pour C#
                    Theme = "vs-dark",
                    Value = texteDefaut // Change aussi le texte par défaut en C#
                };
    }


#warning Check
    [Parameter]
    public STIMULUS_V2.Shared.Models.Entities.Exercice ExerciceModel { get; set; }

    /// <summary>
    /// FocusedTab : attribut pour afficher le textarea
    /// HiddenTab : attribut pour cacher le textarea
    /// Result : résultat du code de l'étudiant
    /// InitDone : Dit si oui ou non l'initialisation du component est fait
    /// </summary>
    [Inject]
    private IJSRuntime JS { get; set; }
    private string FocusedTab { get; set; } = "focused";
    private string HiddenTab { get; set; } = "hidden";
    private string IdEtudiant { get; set; } = string.Empty;
    private string Result { get; set; } = string.Empty;
    private bool InitDone { get; set; } = false;


    /// <summary>
    /// Classe interne pour les fichiers
    /// Le fichier est caché par défaut
    /// </summary>
    /// <param name="Id"> id du fichier provenant de la BD </param>
    /// <param name="Css"> Permet d'afficher ou cacher le textarea </param>
    /// <param name="Nom"> Nom du fichier </param>
    /// <param name="Contenu"> Code du fichier </param>
    public class Fichier
    {
        public int Id { get; set; }
        public string Css { get; set; }
        public string Nom { get; set; }
        public string Contenu { get; set; }
        public DateTime Date { get; set; }

        public Fichier(int id, string nom, string contenu)
        {
            Id = id;
            Nom = nom;
            Contenu = contenu;
            Css = "hidden";
            Date = DateTime.Now;
        }

        public Fichier()
        {
        }
    }
    private List<Fichier> FichierCode { get; set; }

    /// <summary>
    /// Permet de DELETE un ficher_sauvegarde
    /// </summary>
    /// <param name="id"> id du fichier a supprimer </param>
    private async void Delete(int id)
    {
        try
        {
            var deletedTab = FichierCode.Find(tab => tab.Id == id);
            deletedTab.Css = FocusedTab;
            FichierCode.Remove(deletedTab);
            await FichierSauvegardeService.Delete(id);
        }
        catch (Exception e)
        {
            //log.Error($"Delete(): Échec de la suppression des fichiers : {e.Message}");

            Result = "Échec de la supression des fichiers";
        }
        Result = "Fichier supprimé ✔️";
        //}
        await SetCode();
        StateHasChanged();
    }


    /// <summary>
    /// Permet de faire des indentations avec la touche tab à la place de faire 4 espaces manuellement
    /// </summary>
    /// <param name="id"> id du fichier qui requiert des tabulations </param>
    private async void Tab(int id)
    {
        //Attention de pas en ajouter plusieurs
        await JS.InvokeVoidAsync("TabulationFunction.tab", id.ToString());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("HighlightFunctions.highlightSnippets");
    }

    // Permet de compter le nombre de Console.ReadLine présent dans le code et de retourner le nombre
    private int VerifierBesoinDonnees(string codeUtilisateur)
    {
        int cptR = 0;
        var regex = new Regex(@"Console\.ReadLine\s*\(\s*\)\s*;");
        var matches = regex.Matches(codeUtilisateur);
        cptR = matches.Count;
        return cptR;
    }

    // permet l'insertion des données de tous les readLine
    private async Task<string[]> InsertionDoneesReadLine(int cpt)
    {
        // Initialisation de `dataReadLine` à null
        string[] dataReadLine = null;

        // Vérification si cpt est positif
        if (cpt > 0)
        {
            // Initialisation du tableau de chaîne avec la taille de cpt
            dataReadLine = new string[cpt];

            // Boucle pour obtenir les valeurs via JS
            for (int i = 0; i < cpt; i++)
            {
                // Utilisation de l'invocation JS pour obtenir les données utilisateur
                dataReadLine[i] = await JS.InvokeAsync<string>("prompt", $"Entrez la valeur pour Console.ReadLine() #{i + 1}:");
            }
        }

        // Retourner le tableau (ou null si cpt <= 0)
        return dataReadLine;
    }

    /// <summary>
    /// Envoit le code de l'étudiant à l'interpréteur  //A changer
    /// </summary>
    private async void Post()
    {
        
        int cptReadLn = 0;
        string[] datatReadLine = null;
        List<object> fichiers = new List<object>();

        Result = "Compilation et exécution du code...";
        csharpLoading = true;
        Console.WriteLine("Running C# code...");
        StateHasChanged();
        //récupération du fichier dont le nom est program.cs et dont la date se rapproche le plus de la date d'aujourd'hui
        Fichier fichierExecute = new Fichier();
        var fichierProgram = FichierCode
                            .Where(f => f.Nom.Equals("program.cs", StringComparison.OrdinalIgnoreCase))
                            .OrderBy(f => Math.Abs((f.Date - DateTime.Now).TotalMilliseconds))
                            .FirstOrDefault();

        if (fichierProgram != null)
        {
            fichierExecute = fichierProgram;
            cptReadLn = VerifierBesoinDonnees(fichierProgram.Contenu);
            datatReadLine = await InsertionDoneesReadLine(cptReadLn);
        }
        else
        {
            Result = "Fichier program.cs introuvable.";
            csharpLoading = false;
            StateHasChanged();
            return;

        }
        // foreach (var fichier in FichierCode)
        // {
        //     if (fichierProgram != null)
        //     {
        //        // string texte = await GetCode();
        //         string texte = fichierProgram.Contenu;
        //         fichiers.Add(new
        //         {
        //             Nom = fichier.Nom,
        //             Contenu = texte // Ne modifiez pas le contenu
        //         });
        //     }
        // }

        // Sérialisation en JSON
        string jsonString = JsonConvert.SerializeObject(fichierExecute);

        // Désérialisation pour obtenir uniquement le contenu
        dynamic temp = JsonConvert.DeserializeObject(jsonString);
        string code = string.Empty;
        code += temp.Contenu;
        // Récupération du contenu
        // foreach (var item in temp)
        // {
        //     code += item.Contenu + "\n"; // Combinez les contenus si nécessaire
        // }

        try
        {
            // Envoi du code à l'API
            var response = await ExerciceService.ExecuteCode(code, cptReadLn, datatReadLine);
            Result = response.Data ?? "No output returned.";
        }
        catch (Exception e)
        {
            Result = $"Erreur lors de l'exécution du code: {e.Message}";
        }
        finally
        {
            csharpLoading = false;
            StateHasChanged();
        }
    }


    /// <summary>
    /// Sauvegarde le fichier python de l'étudiant
    /// </summary>
    private async Task Save()
    {
        List<FichierSauvegarde> fichiersSauvegardes = new List<FichierSauvegarde>();
        int id = -1;
        foreach (Fichier fichier in FichierCode)
        {
            if (fichier.Css != "hidden")
            {
                id = fichier.Id;
            }
            await ChangeTab(fichier.Id);
            fichiersSauvegardes.Add(new FichierSauvegarde()
                    {
                        FichierSauvegardeId = fichier.Id,
                        Nom = fichier.Nom,
                        Contenue = fichier.Contenu,
                        Version = DateTime.Now,
                        CodeDA = IdEtudiant,
                        ExerciceId = exercice.ExerciceId
                    });
        }
        try
        {
            foreach (var PostFichier in fichiersSauvegardes)
            {
                var tempoFi = new FichierSauvegarde()
                        {
                            Nom = PostFichier.Nom,
                            Contenue = PostFichier.Contenue,
                            Version = DateTime.Now,
                            CodeDA = IdEtudiant,
                            ExerciceId = exercice.ExerciceId
                        };
                try
                {
                    var fichierTest = await FichierSauvegardeService.Get(PostFichier.FichierSauvegardeId);
                    var dataFichierTest = fichierTest.Data;
                    await FichierSauvegardeService.Update(PostFichier.FichierSauvegardeId, PostFichier);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    await FichierSauvegardeService.Create(tempoFi);
                }
            }
            var fichiersSauvegardesCall = await FichierSauvegardeService.GetAllExercice(exercice.ExerciceId, IdEtudiant);
            var fichier = fichiersSauvegardesCall.Data;

            FichierCode.Clear();
            foreach (var fichierListSauvegarde in fichier)
            {
                FichierCode.Add(new Fichier()
                        {
                            Contenu = fichierListSauvegarde.Contenue,
                            Nom = fichierListSauvegarde.Nom,
                            Id = fichierListSauvegarde.FichierSauvegardeId,
                            Css = HiddenTab
                        });
            }
            //FichierCode[0].Css = FocusedTab;
        }
        catch (Exception e)
        {
            Result = "Échec de l'enregistrement des fichiers";
        }
        Result = "Fichiers enregistrés ✔️";

        Console.WriteLine("File saved");

        //var log = Log.ForContext<StimulusFrontEnd.Models.Exercice>();
        //log.Information($"Save(): File saved");
        if (FichierCode.Count() > 0)
        {
            if (id < 0)
                id = FichierCode.Last().Id;
            await ChangeTab(id);
        }
        StateHasChanged();
    }
    /// <summary>
    /// Change le focus du fichier à éditer
    /// </summary>
    /// <param name="id"> id du fichier qui récupère le focus </param>
    private async Task ChangeTab(int id)
    {
        foreach (Fichier fichier in FichierCode)
        {
            if (fichier.Css != "hidden")
            {
                fichier.Contenu = await GetCode();
                fichier.Css = HiddenTab;
            }
        }
        FichierCode.Find(f => f.Id == id).Css = "focused";
        await SetCode(FichierCode.Find(f => f.Id == id).Contenu);
        StateHasChanged();
    }
    /// <summary>
    /// Ajoute un fichier
    /// </summary>
    private async void AddPage(string nomFichier, DialogService dialogService)
    {
        nomFichier = String.Concat(nomFichier.Where(c => !Char.IsWhiteSpace(c))).ToLower();
        nomFichier = NomFichier;

        if (String.IsNullOrWhiteSpace(nomFichier))
        {
            Result = "Nom de fichier invalide";
            dialogService.Close(true);
        }
        else if (nomFichier.Length < 4)
        {
            Result = "Nom de fichier trop court";
            dialogService.Close(true);
        }
        else if (FichierCode.Any(f => f.Nom == nomFichier))
        {
            Result = "Nom de fichier déjà utilisé";
            dialogService.Close(true);
        }
        else
        {
            if (!nomFichier.EndsWith(".cs")) // Changement pour fichiers C#
            {
                // Ajouter ".cs" à la fin du nom du fichier
                nomFichier += ".cs";
            }
            try
            {
                foreach (Fichier f in FichierCode)
                {
                    f.Css = HiddenTab;
                }

                FichierCode.Add(new Fichier()
                        {
                            Contenu = TexteDefaut2(nomFichier),
                            Nom = nomFichier,
                            Id = -(FichierCode.Count + 1),
                            Css = FocusedTab
                        });

                dialogService.Close(true);
            }
            catch (Exception e)
            {

            }
        }
        StateHasChanged();
    }

    // Ajout d'une page
    async Task AlertAddPage()
    {
        var result = await DialogService.OpenAsync("Ajouter une page", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextBox class="custom-gestion-subtitle" Style="width: 100%;" Name="Nom" @bind-Value="NomFichier" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ajouter" Click="(() => AddPage(NomFichier, ds))" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Text="Annuler" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }

    public EventCallback<List<FichierSource>> FichierSourceChanged { get; set; }
    }
}