@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;

@inject IVideoService VideoService
@inject IComposantService ComposantService

<div class="container text-center" style="text-align: center;">
    @if (video != null)
    {
        <div style="position: relative;">
            <iframe width="800" height="500" src="@video.Url" frameborder="0" allowfullscreen style="margin: 0 auto;"></iframe>
            <p style="font-style: italic; margin-top: 10px;">@((video.Description != null) ? video.Description : "")</p>
        </div>
    }
    else
    {
        <p>Chargement...</p> <!-- ou un message indiquant que la vidéo est en cours de chargement -->
    }
</div>

@code {
    [Parameter] 
    public int Reference { get; set; }

    public Video video { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var Video = await VideoService.Get(Reference);
        video = Video.Data;

        await base.OnInitializedAsync();
        await TransformerVideoEmbed();
        StateHasChanged();
    }

	public async Task TransformerVideoEmbed()
	{
        string youtubeUrl = video.Url;
        video.Url = GetYouTubeEmbedLink(youtubeUrl);

        string GetYouTubeEmbedLink(string youtubeUrl)
        {
            // Extraire l'identifiant de la vidéo à partir de l'URL
            string videoId = ExtractVideoId(youtubeUrl);

            // Construire le lien embed
            string embedUrl = $"https://www.youtube.com/embed/{videoId}";

            return embedUrl;
        }

        string ExtractVideoId(string youtubeUrl)
        {
            Uri uri = new Uri(youtubeUrl);
            string videoId = null;

            // Recherche du paramètre 'v' dans la query
            string query = uri.Query;
            int index = query.IndexOf("v=");
            if (index != -1)
            {
                int startIndex = index + 2; // Début de l'identifiant après 'v='
                videoId = query.Substring(startIndex);

                // Si l'identifiant contient d'autres paramètres, les supprimer
                int endIndex = videoId.IndexOf("&");
                if (endIndex != -1)
                {
                    videoId = videoId.Substring(0, endIndex);
                }
            }

            // Si l'identifiant n'a pas été trouvé dans la query, essayer avec le dernier segment du chemin
            if (string.IsNullOrEmpty(videoId))
            {
                string[] segments = uri.Segments;
                if (segments.Length > 0)
                {
                    videoId = segments[segments.Length - 1].Trim('/');
                }
            }

            if (string.IsNullOrEmpty(videoId))
            {
                throw new ArgumentException("L'URL YouTube ne contient pas de paramètre 'v'.");
            }
            return videoId;
        }
	}
}
