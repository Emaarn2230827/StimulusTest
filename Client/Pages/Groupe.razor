@using STIMULUS_V2.Client.Services;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IGroupeService GroupeService
@inject IEtudiantService EtudiantService
@inject ICoursService CoursService
@inject NavigationManager NavigationManager
@inject IGrapheService GrapheService
@inject INoeudService NoeudService
@inject IPageService PageService
@inject IComposantService ComposantService
@inject INoeudEtudiantService NoeudEtudiantService
@inject RerenderService Rerender
@inject IGroupeEtudiantService GroupeEtudiantService
@inject Radzen.DialogService DialogService
@inject AppState State;

@page "/Groupe"

<div class="custom-groupe-titletop">
    <RadzenLabel>Gestion de groupe</RadzenLabel>
</div>
<RadzenCard Class="rz-my-6 mx-auto" Style="max-width: 1200px">
    <RadzenStack Orientation="Orientation.Horizontal">
        @if (siActif == "Actif")
        {
            <RadzenText class="custom-groupe-title" TextStyle="TextStyle.Caption">Sera inactif le @((groupeProf != null) ? dateAffichee : "")</RadzenText>
        }
        <RadzenButton Click=SupprimerGroupe Text="Supprimer le groupe" class="custom-graphe-viewmodebutton-title" ButtonStyle="ButtonStyle.Danger" Style="margin-left:65%; background-color: darkblue; background-color: #14274E;" />
        @if (loading == true)
        {
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Dark" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
     
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
        <RadzenStack Style="margin-left: 10%;" Orientation="Orientation.Vertical" class="rz-my-0">
            <RadzenStack Style="margin-top: 15%;" Orientation="Orientation.Horizontal" class="rz-display-flex align-items-center">
                <RadzenText class="custom-groupe-title" TextStyle="TextStyle.Overline">Nom:</RadzenText>
                <RadzenText class="custom-groupe-subtitle" TextStyle="TextStyle.Body1"><b>@((groupeProf != null) ? groupeProf.Nom : "")</b></RadzenText>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" class="rz-display-flex">
                <RadzenImage Path="@imageActif" Style="width: 10px; height: 10px; border-radius: 50%; margin-top: 5%" />
                <RadzenText TextStyle="TextStyle.Overline" class="custom-groupe-title rz-display-flex rz-my-0">Status:</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@siActif</b></RadzenText>
            </RadzenStack>
           
            <RadzenStack Orientation="Orientation.Horizontal" class="rz-display-flex">
                <RadzenText TextStyle="TextStyle.Overline" class="custom-groupe-title rz-display-flex rz-mt-2 rz-mb-0">Cours associé: </RadzenText>
                @if (groupeCours != null)
                {
                    <RadzenText Style="margin-top: 5%;" class="custom-groupe-subtitle" TextStyle="TextStyle.Body1"><b>@((groupeCours != null) ? groupeCours.Code : "")</b></RadzenText>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body1"><b>Aucun</b></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" class="rz-p-4">
                        <RadzenDropDown class="custom-groupe-title" @bind-Value=@idCours Data=@listCours TextProperty="Code" ValueProperty="CoursId" AllowClear=true Placeholder="Associé un cours" Style="width: 100%; max-width: 400px;" Name="DropDownClear" />
                        <RadzenButton class="custom-groupe-title" Click=@(args => AssocierCours(idCours)) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
                    </RadzenStack>
                }
            </RadzenStack>
           
        </RadzenStack>
        <RadzenStack Style="margin-left: 10%; margin-" Orientation="Orientation.Vertical">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenText TextStyle="TextStyle.Overline" class="custom-groupe-title rz-display-flex rz-my-0">@((listGrapheGroupe.Any() ? "Graphe(s) associé(s): " : "Aucun graphe pour ce groupe"))</RadzenText>
                    @foreach (var graphe in listGrapheGroupe)
                {
                    <RadzenButton class="custom-groupe-title" Click="@(() => RedirectionGraphe(graphe.GrapheId))" Text="@graphe.Nom" Style="margin-left:20px; margin-right: 20px; background-color: #14274E;" />
                }
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenText TextStyle="TextStyle.Overline" class="custom-groupe-title rz-display-flex rz-mt-2 rz-my-0">Mettre à jour la liste d'étudiant</RadzenText>
                <RadzenDropDown class="custom-gestion-subtitle" @bind-Value=@selectedEtudiants Data=@listEtudiant TextProperty="Identifiant" ValueProperty="Identifiant" Name="DropDownMultipleChips" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true AllowClear=true Placeholder="Ajouter des étudiants" Chips="true" Style="height: 25%; width: 80%; max-width: 400px;"></RadzenDropDown>
                <RadzenButton Click=@(() => UpdateEtudiant()) Icon="refresh" class="custom-graphe-viewmodebutton-title" ButtonStyle="ButtonStyle.Danger" style="background-color: darkblue; background-color: #14274E;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenText TextStyle="TextStyle.H6" Class="text-center" Style="margin-top:20px;margin-bottom:10px; text-decoration: underline"><strong>Liste des élèves</strong></RadzenText>
    <RadzenRow RowGap="2" Class="justify-content-center">
        @if (listEtudiantAjoute.Any())
        {
            <RadzenDataGrid TItem="Etudiant" Data="@listEtudiantAjoute" EmptyText="Aucun élève dans ce groupe." Sortable="true" SortOrder="SortOrder.Ascending" Style="height: 50%; text-align: center; margin-top:20px; margin-bottom:10px;">
                <Columns>
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Identifiant" Title="Code DA" />
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Prenom" Title="Prénom" />
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Nom" Title="Nom" />
                </Columns>
            </RadzenDataGrid>
        }
    </RadzenRow>
    @if (listEtudiantAjoute.Count() == 0)
    {
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Ce groupe ne contient aucun étudiant.</RadzenText>
        </RadzenStack>
    }
</RadzenCard>


@* <RadzenCard Class="rz-my-12 mx-auto" Style="max-width: 1200px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
    <RadzenButton Click=SupprimerGroupe Text="Supprimer le groupe" class="custom-graphe-viewmodebutton-title" ButtonStyle="ButtonStyle.Danger" style="background-color: darkblue; background-color: #14274E;" />
        @if (loading == true)
        {
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Dark" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenImage Path="@imageActif" Style="width: 50px; height: 50px; border-radius: 50%;" />
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Nom</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@((groupeProf != null) ? groupeProf.Nom : "")</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Status</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@siActif</b></RadzenText>
            @if (siActif == "Actif")
            {
                <RadzenText TextStyle="TextStyle.Caption">Sera inactif le @((groupeProf != null) ? dateAffichee : "")</RadzenText>
            }
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Cours associé</RadzenText>
            @if (groupeCours != null)
            {
                <RadzenText TextStyle="TextStyle.Body1"><b>@((groupeCours != null) ? groupeCours.Code : "")</b></RadzenText>
            }
            else
            {
                <RadzenText TextStyle="TextStyle.Body1"><b>Aucun</b></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" class="rz-p-4">
                    <RadzenDropDown @bind-Value=@idCours Data=@listCours TextProperty="Code" ValueProperty="CoursId" AllowClear=true Placeholder="Associé un cours" Style="width: 100%; max-width: 400px;" Name="DropDownClear" />
                    <RadzenButton Click=@(args => AssocierCours(idCours)) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
                </RadzenStack>
            }
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">@((listGrapheGroupe.Any() ? "Graphe(s) associé(s): " : "Aucun graphe pour ce groupe"))</RadzenText>
            @foreach (var graphe in listGrapheGroupe)
            {
                <RadzenButton Click="@(() => RedirectionGraphe(graphe.GrapheId))" Text="@graphe.Nom" Style="margin-left:20px; margin-right: 20px; margin-top :20px;background-color: #14274E;" />
            }
        </RadzenStack>
        <RadzenStack Gap="2">   
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0">
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="3">
       
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Style="margin-top:10px;" Gap="2">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Mettre à jour la liste d'étudiant</RadzenText>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Style="margin-top:10px;" Gap="3">
        <RadzenDropDown class="custom-gestion-subtitle" @bind-Value=@selectedEtudiants Data=@listEtudiant TextProperty="Identifiant" ValueProperty="Identifiant" Name="DropDownMultipleChips" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true AllowClear=true Placeholder="Ajouter des étudiants" Chips="true" Style="width: 100%; max-width: 400px;">
        </RadzenDropDown>
        <RadzenButton Click=@(() => UpdateEtudiant()) Icon="refresh" class="custom-graphe-viewmodebutton-title" ButtonStyle="ButtonStyle.Danger" style="background-color: darkblue; background-color: #14274E;" />
    </RadzenStack>
    <RadzenText TextStyle="TextStyle.H6" Class="text-center" Style="margin-top:20px;margin-bottom:10px; text-decoration: underline"><strong>Liste des élèves</strong></RadzenText>
    <RadzenRow RowGap="2" Class="justify-content-center">
        @if (listEtudiantAjoute.Any())
        {
            <RadzenDataGrid TItem="Etudiant" Data="@listEtudiantAjoute" EmptyText="Aucun élève dans ce groupe." Sortable="true" SortOrder="SortOrder.Ascending" Style="height: 50%; text-align: center; margin-top:20px; margin-bottom:10px;">
                <Columns>
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Identifiant" Title="Code DA" />
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Prenom" Title="Prénom" />
                    <RadzenDataGridColumn TextAlign="TextAlign.Center" TItem="Etudiant" Property="Nom" Title="Nom" />
                </Columns>
            </RadzenDataGrid>
        }
    </RadzenRow>
    @if (listEtudiantAjoute.Count() == 0)
        {
          <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">   
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Ce groupe ne contient aucun étudiant.</RadzenText>
          </RadzenStack>
        }
</RadzenCard> *@

@code {
    [Parameter]
    public EventCallback OnEtudiantChanged { get; set; }
    [Parameter]
    public EventCallback OnGroupeDelete { get; set; }
    public STIMULUS_V2.Shared.Models.Entities.Groupe groupeProf { get; set; }
    public STIMULUS_V2.Shared.Models.Entities.Cours groupeCours { get; set; }
    public STIMULUS_V2.Shared.Models.Entities.Noeud_Etudiant noeud_etudiant { get; set; }
    public List<STIMULUS_V2.Shared.Models.Entities.Graphe> listGrapheGroupe { get; set; } = new List<STIMULUS_V2.Shared.Models.Entities.Graphe>();
    public STIMULUS_V2.Shared.Models.Entities.Groupe_Etudiant groupe_etudiant = new();
    public List<Cours> listCours{ get; set; } = new List<Cours>();
    public List<Etudiant> listEtudiant { get; set; } = new List<Etudiant>();
    public List<Etudiant> listEtudiantAjoute { get; set; } = new List<Etudiant>();
    private List<string> selectedEtudiants = new List<string>();
    public DateTime dateDuJour = DateTime.Now.Date;
    public int idCours;
    public string imageActif;
    public string siActif;
    public string dateAffichee;
    public bool loading;

    protected override async Task OnInitializedAsync()
    {
        await GetDataGroupe();
    }  

    private async Task GetDataGroupe()
    {
        try
        {
            var etudiant = await EtudiantService.GetAll();
            var student = etudiant.Data;
            listEtudiant.AddRange(student);

            var newcours = await CoursService.GetAll();
            listCours.AddRange(newcours.Data);

            var groupe = await GroupeService.Get(await sessionStorage.GetItemAsync<int>("idGroupe"));
            groupeProf = groupe.Data;

            if (groupeProf.DateCloture >= dateDuJour)
            {
                imageActif = "/RessourceVisuel/groupeactif.jpg";
                siActif = "Actif";
            }
            else
            {
                imageActif = "/RessourceVisuel/groupeinactif.jpg";
                siActif = "Inactif";
            }

            var dateCloture = (groupeProf != null) ? groupeProf.DateCloture : DateTime.MinValue;
            dateAffichee = dateCloture.ToString("yyyy-MM-dd");

            var graphe = await GrapheService.GetAllFromGroup(await sessionStorage.GetItemAsync<int>("idGroupe"));
            var graphes = graphe.Data;
            foreach (var grapheGroupe in graphes)//Va chercher tous les graphes, de tous les groupes
            {
                if (grapheGroupe != null)
                {
                    listGrapheGroupe.Add(grapheGroupe);
                }
            }

            var eleve = await GroupeEtudiantService.GetAllStudentForGroup(await sessionStorage.GetItemAsync<int>("idGroupe"));
            var etudiants = eleve.Data;

            foreach (var studentGroupe in etudiants)
            {
                var responseEtudiant = await EtudiantService.Get(studentGroupe.CodeDA);
                var etudiantGroupe = responseEtudiant.Data;

                // Vérifiez si l'étudiantGroupe est non null avant de l'ajouter à la liste
                if (etudiantGroupe != null)
                {
                    listEtudiantAjoute.Add(etudiantGroupe);
                    selectedEtudiants.Add(etudiantGroupe.Identifiant);
                }
            }

            if (await CoursService.Get((int)groupeProf.CoursId) != null)
            {
                var cours = await CoursService.Get((int)groupeProf.CoursId);
                groupeCours = cours.Data;
            }        
            StateHasChanged();
        }    
        catch{ }
    }
    private async void SupprimerGroupe()
    {
        var responseGroupeEtudiant = await GroupeEtudiantService.GetAllStudentForGroup(await sessionStorage.GetItemAsync<int>("idGroupe"));
        var responseGraphe = await GrapheService.GetAllFromGroup(await sessionStorage.GetItemAsync<int>("idGroupe"));

        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer ce groupe ? Il contient : "+ responseGroupeEtudiant.Data.Count() +" étudiant(s) et " +responseGraphe.Data.Count()+ " graphe(s). Par la suite de cette action ces données seront supprimés.", "Supprimer");

        if (result.HasValue && result.Value)
        {
            loading = true;
            StateHasChanged();

            foreach (var etudiantGroupeDelete in responseGroupeEtudiant.Data)
            {
                await GroupeEtudiantService.Delete(etudiantGroupeDelete.Groupe_EtudiantId);
            }
            foreach (var grapheGroupe in responseGraphe.Data)
            {
                await SupprimerGraphe(grapheGroupe.GrapheId);
            }

            await GroupeService.Delete(await sessionStorage.GetItemAsync<int>("idGroupe"));
            loading = false;
            await OnGroupeDelete.InvokeAsync();
            Rerender.TriggerGroupeDelete();
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task AssocierCours(int coursId)
    {
        var groupe = await GroupeService.Get(await sessionStorage.GetItemAsync<int>("idGroupe"));
        groupeProf = groupe.Data;
        groupeProf.CoursId = coursId;
        await GroupeService.Update(groupeProf.GroupeId, groupeProf);
        var Newcours = await CoursService.Get(coursId);
        StateHasChanged();
        groupeCours = Newcours.Data;
        await OnGroupeDelete.InvokeAsync();
        Rerender.TriggerGroupeDelete();
        StateHasChanged();
    }

    private async Task UpdateEtudiant()
    {
        var groupeId = await sessionStorage.GetItemAsync<int>("idGroupe");
        var eleve = await GroupeEtudiantService.GetAllStudentForGroup(groupeId);

        try
        {
            // Supprimer les étudiants qui ne sont plus sélectionnés
            var etudiantsASupprimer = eleve.Data.Where(etudiant => !selectedEtudiants.Contains(etudiant.CodeDA)).ToList();

            foreach (var etudiantDelete in etudiantsASupprimer)
            {
                await GroupeEtudiantService.Delete(etudiantDelete.Groupe_EtudiantId);

                foreach (var graphe in listGrapheGroupe)
                {
                    var allNoeud = await NoeudService.GetAllFromGraph(graphe.GrapheId);

                    foreach (var noeud in allNoeud.Data)
                    {
                        var noeud_etudiantDelete = await NoeudEtudiantService.GetByNoeudAndDa(noeud.NoeudId, etudiantDelete.CodeDA);
                        await NoeudEtudiantService.Delete(noeud_etudiantDelete.Data.Noeud_EtudiantId);
                    }
                }
            }

            // Ajouter les nouveaux étudiants
            var nouveauxEtudiants = new List<Etudiant>();

            foreach (var etudiantDa in selectedEtudiants)
            {
                var existingEtudiant = eleve.Data.FirstOrDefault(e => e.CodeDA == etudiantDa);

                if (existingEtudiant == null)
                {
                    var groupe_etudiant = new Groupe_Etudiant
                            {
                                GroupeId = groupeId,
                                CodeDA = etudiantDa
                            };

                    var etudiantAjoute = await GroupeEtudiantService.Create(groupe_etudiant);
                    var etudiant = await EtudiantService.Get(etudiantAjoute.Data.CodeDA);

                    foreach (var graphe in listGrapheGroupe)
                    {
                        var allNoeud = await NoeudService.GetAllFromGraph(graphe.GrapheId);

                        foreach (var noeud in allNoeud.Data)
                        {
                            var newNoeudEtudiant = new Noeud_Etudiant
                                    {
                                        CodeDA = etudiantDa,
                                        NoeudId = noeud.NoeudId,
                                        Status = noeud.Status
                                    };

                            await NoeudEtudiantService.Create(newNoeudEtudiant);
                        }
                    }

                    nouveauxEtudiants.Add(etudiant.Data);
                }
            }
            listEtudiantAjoute.Clear();
            selectedEtudiants.Clear();
            StateHasChanged();
            var eleves = await GroupeEtudiantService.GetAllStudentForGroup(await sessionStorage.GetItemAsync<int>("idGroupe"));
            var etudiants = eleves.Data;
            foreach (var etudiant in etudiants)
            {
                var responseEtudiant = await EtudiantService.Get(etudiant.CodeDA);
                var etudiantGroupe = responseEtudiant.Data;

                // Vérifiez si l'étudiantGroupe est non null avant de l'ajouter à la liste
                if (etudiantGroupe != null)
                {
                    listEtudiantAjoute.Add(etudiantGroupe);
                    selectedEtudiants.Add(etudiantGroupe.Identifiant);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Gérer les exceptions
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    //ACTION POUR SUPPRESSION DES GRAPHES LORS DE LA SUPPRESION DE GROUPE

    private async Task SupprimerGraphe(int grapheId)
    {
            // Récupérer tous les nœuds du graphe
            var allNoeuds = await NoeudService.GetAllFromGraph(grapheId);
            var noeuds = allNoeuds.Data;

            // Supprimer les nœuds et leurs enfants récursivement
            foreach (var noeudDelete in noeuds)
            {
                await SupprimerNoeudEtSesEnfants(noeudDelete.NoeudId);
            }

            // Supprimer le graphe
            await GrapheService.Delete(grapheId);
    }

    private async Task SupprimerNoeudEtSesEnfants(int noeudId)
    {
        // Supprimer les pages associées au nœud
        var allPage = await PageService.GetAllFromNoeud(noeudId);
        var pages = allPage.Data;

        if (pages != null)
        {
            foreach (var pageDelete in pages)
            {
                var allComposant = await ComposantService.GetAllById(pageDelete.PageId);
                var composant = allComposant.Data;

                if (composant != null)
                {
                    foreach (var composantDelete in composant)
                    {
                        await ComposantService.Delete(composantDelete.ComposantId);
                    }
                }
                await PageService.Delete(pageDelete.PageId);
            }
        }

        // Supprimer les enfants récursivement
        var children = await NoeudService.GetAllById(noeudId);
        foreach (var child in children.Data)
        {
            await SupprimerNoeudEtSesEnfants(child.NoeudId);
        }

        // Supprimer les associations d'étudiants pour le nœud
        var noeudEtudiants = await NoeudEtudiantService.GetAllById(noeudId);
        var etudiantNoeudDelete = noeudEtudiants.Data;
        if (etudiantNoeudDelete != null)
        {
            foreach (var etudiantNoeud in etudiantNoeudDelete)
            {
                await NoeudEtudiantService.Delete(etudiantNoeud.Noeud_EtudiantId);
            }
        }

        // Supprimer le nœud lui-même
        await NoeudService.Delete(noeudId);
    }

    private async void RedirectionGraphe(int id)
    {
        await sessionStorage.SetItemAsync<int>("idGraphe", id);
        NavigationManager.NavigateTo("/Graphe");

    }
}
