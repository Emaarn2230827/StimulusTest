@using Radzen.Blazor.Rendering;
@using STIMULUS_V2.Client.Shared.TheoryComponent;
@using STIMULUS_V2.Shared.Interface.ChildInterface;
@using STIMULUS_V2.Shared.Models.Entities;

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IPageService PageService
@inject IComposantService ComposantService
@inject INoeudService NoeudService
@inject IVideoService VideoService
@inject ITexteFormaterService TexteService
@inject IImageService ImageService
@inject ICodeService CodeService
@inject IExerciceService ExerciceService
@inject IReferenceService ReferenceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime
@inject Radzen.DialogService DialogService

@page "/ModifierPages"


<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-header' 'rz-body rz-sidebar'; height: 3200px;">­
    <RadzenSidebar>
        <RadzenPanelMenu>
            @foreach (var page in listePage.OrderBy(c => c.Ordre))
            {
                <RadzenPanelMenuItem Text="@((page.Ordre != null) ? "Page #" + page.Ordre : "")" Click="@(args => ChangePageWithNavBar(page.PageId))" Icon="book"/>
            }
            <RadzenPanelMenuItem Text="Ajouter une page" Click="@(args => AddPage())" Icon="note_add" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <RadzenCard Class="rz-my-12 mx-auto" Style="max-width: 1500px; margin : 30px; height : 3200px;">
            <div style="text-align: center;">
                <RadzenButton Click=@DeletePage Text="Supprimer la page" Icon="report" ButtonStyle="ButtonStyle.Danger" />
            </div>
            <div style="text-align: center;">
                <RadzenButton Text="Page Précédente" Click="@(args => PreviousPage())" />
                <RadzenButton Text="Page Suivante" Click="@(args => NextPage())" />
            </div>
            <RadzenText TextStyle="TextStyle.H6" Class="text-center" Style="margin-top:20px;margin-bottom:10px; text-decoration: underline"><strong>Édition</strong></RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-4">
                <RadzenImage Path="/RessourceVisuel/editpencil.png" Style="width: 100px; height: 100px; border-radius: 50%;" />
                <RadzenStack Gap="2">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Noeud</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@((noeud.Nom != null) ? noeud.Nom : "")</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Page</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@((page.Ordre != null || page.Ordre != 0) ? "#" + page.Ordre : "")</b></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0">
                <RadzenButton @ref=button ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Ajouter un composant" Click="@(args => popup.ToggleAsync(button.Element))" />
                <Popup @ref=popup Lazy=true Open="@OnOpen" Style="display:none;position:absolute;height:400px;width:400px;padding:5px;border:var(--rz-panel-border);background-color:var(--rz-panel-background-color); text-align: center;">
                    <!-- Reste du code inchangé -->
                    <EditForm Model="composant" OnSubmit="@AddComposant">
                        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                            <RadzenColumn Class="mx-auto">
                                <!-- Ajouter la classe "mx-auto" pour centrer horizontalement le contenu -->
                                <RadzenStack>
                                    <RadzenFieldset Text="Créer un nouveau composant">
                                        <RadzenStack Gap="1rem" Orientation="Orientation.Vertical">
                                            <RadzenRow AlignItems="AlignItems.Center" Style="width: 300px;">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Type de composant" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenDropDown @bind-Value="typeComposant" Placeholder="Type" Data="types" Style="width: 200px;" Name="Type" />                                
                                                </RadzenColumn>
                                            </RadzenRow>

                                            @if (typeComposant == "Video")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="URL de la vidéo" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="urlVideo" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Description" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="descriptionVideo" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                            @if (typeComposant == "Texte")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Contenu" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextArea @bind-Value="contenuTexte" Style="width: 200px; height : 200px" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                            @if (typeComposant == "Reference")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="URL de la référence" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="urlReference" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Description" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="descriptionReference" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                            @if (typeComposant == "Image")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="URL de l'image" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="urlImage" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Description" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="descriptionImage" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                            @if (typeComposant == "Exercice")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Start">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Solution" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="solutionExercice" Style="width: 200px;" /> @* TEMPORAIRE *@
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                            @if (typeComposant == "Code")
                                            {
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Titre" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextBox @bind-Value="titreCode" Style="width: 200px;" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                                <RadzenRow AlignItems="AlignItems.Center">
                                                    <RadzenColumn Size="12" SizeMD="4">
                                                        <RadzenLabel Text="Contenu" />
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeMD="8">
                                                        <RadzenTextArea @bind-Value="contenuCode" Style="width: 200px;height : 200px;" />@* TEMPORAIRE *@
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                        </RadzenStack>
                                    </RadzenFieldset>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Créer" />
                        </RadzenStack>
                    </EditForm>
                </Popup>
            </RadzenStack>
            <RadzenRow RowGap="2" Class="justify-content-start">
                @foreach (var composant in listComposant.OrderBy(c => c.Ordre))
                {
                    <div style="margin: 0 auto; width: 100%;max-width: 1200px; padding: 10px;">
                        <!-- Conteneur du bouton -->
                        <div style="text-align: right; margin-bottom: 10px;">
                            <div style="text-align: center;">
                                @if(composant.Ordre != 1)
                                {
                                    <!-- Bouton pour la flèche vers le haut -->
                                    <RadzenButton Style="position: relative; margin-bottom: -20px;" Icon="arrow_upward" Click="@(args => ChangeComposantOrdreUp(composant.ComposantId))" />
                                }
                                @if(listComposant.Count() != composant.Ordre)
                                {
                                    <!-- Bouton pour la flèche vers le bas -->
                                    <RadzenButton Icon="arrow_downward" Click="@(args => ChangeComposantOrdreDown(composant.ComposantId))" />
                                }
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Style="height:35px;" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteComposant(composant.ComposantId))" />
                            </div>
                        </div>

                        <div style="justify-content-center">
                            <!-- Conteneur du composant spécifique -->
                            @if (composant.Type == "Code")
                            {
                                <CodeComponent Reference="composant.Reference" />
                            }
                            @if (composant.Type == "Exercice")
                            {
                                <ExerciceComponent Reference="composant.Reference" />
                            }
                        </div>

                        <div style="text-align: center;">

                            @if (composant.Type == "Image")
                            {
                                <ImageComponent Reference="composant.Reference" />
                            }
                            @if (composant.Type == "Reference")
                            {
                                <ReferenceComponent Reference="composant.Reference" />
                            }
                            @if (composant.Type == "Texte")
                            {
                                <TextComponent Reference="composant.Reference" />
                            }
                            @if (composant.Type == "Video")
                            {
                                <VideoComponent Reference="composant.Reference" />
                            }
                        </div>
                    </div>
                }
            </RadzenRow>
        </RadzenCard>
    </RadzenBody>

    </RadzenLayout>

@code {
    [Parameter]
    public EventCallback OnStatusUpdated { get; set; }
    bool sidebar1Expanded = true;
    Popup popup;
    RadzenButton button;
    private List<Composant> listComposant { get; set; } = new List<Composant>();
    public List<Page> listePage { get; set; } = new List<Page>();
    private Page page { get; set; } = new();
    private Page newPage { get; set; } = new();
    private Composant composant { get; set; } = new();
    private Noeud noeud { get; set; } = new();
    private Video video { get; set; } = new();
    private TexteFormater texte { get; set; } = new();
    private Code code { get; set; } = new();
    private Reference reference { get; set; } = new();
    private Image image { get; set; } = new();
    private Exercice exercice { get; set; } = new();
    public string typeComposant { get; set; }
    public int CurrentPage { get; set; }

    //pour la video
    private string urlVideo { get; set; }
    private string descriptionVideo { get; set; }
    private string largeurVideo { get; set; }
    private string LongeurVideo { get; set; }

    //pour texte
    private string contenuTexte { get; set; }

    //pour reference
    private string urlReference { get; set; }
    private string descriptionReference { get; set; }

    //pour image
    private string urlImage { get; set; }
    private string descriptionImage { get; set; }
    private string largeurImage { get; set; }
    private string LongeurImage { get; set; }

    //pour exercice
    private string solutionExercice { get; set; }

    //pour code
    private string contenuCode { get; set; }
    private string titreCode { get; set; }

    List<string> types = new List<string>() //Permet un affichage correct du Status
    {
        "Video",
        "Texte",
        "Reference",
        "Image",
        "Exercice",
        "Code"
    };

    protected async override Task OnInitializedAsync()
    {
        try
        {
           await sessionStorage.GetItemAsync<int>("idPage");
        }
        catch
        {
            NavigationManager.NavigateTo("/Graphe");
        }

        var pageActuelle = await PageService.Get(await sessionStorage.GetItemAsync<int>("idPage"));
        page = pageActuelle.Data;

        var noeudActuelle = await NoeudService.Get(await sessionStorage.GetItemAsync<int>("idNoeud"));
        noeud = noeudActuelle.Data;

        var pageNoeud = await PageService.GetAllFromNoeud(await sessionStorage.GetItemAsync<int>("idNoeud"));
        var affichPage = pageNoeud.Data;

        listePage.AddRange(affichPage);

        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;
        listComposant.AddRange(composants);

        StateHasChanged();
    }

    private async void DeleteComposant(int id)
    {
        var ordreComposant = await ComposantService.Get(id);
        var composantDelete = ordreComposant.Data;

        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;

        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer ce composant?", "Supprimer");

        if (result.HasValue && result.Value)
        {
            foreach (var reOrdered in composants)
            {
                if (composantDelete.Ordre < reOrdered.Ordre)
                {
                    reOrdered.Ordre = reOrdered.Ordre - 1;
                    await ComposantService.Update(reOrdered.ComposantId, reOrdered);
                }
            }
            await ComposantService.Delete(id);

            var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
            listComposant = composantsRefresh.Data.ToList();
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/ModifierPages");
        }
    }

    private async void AddComposant()
    {
        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        var composants = allComposant.Data;

        if (typeComposant == "Code")
        {
            code.Titre = titreCode;
            code.Contenu = contenuCode;

            var codeNew = await CodeService.Create(code);
            var newCode = codeNew.Data;
            composant.Reference = newCode.CodeId;
        }
        if (typeComposant == "Exercice")
        {
            exercice.Solution = solutionExercice;

            var exerciceNew = await ExerciceService.Create(exercice);
            var newExercice = exerciceNew.Data;
            composant.Reference = newExercice.ExerciceId;
        }
        if (typeComposant == "Image")
        {
            image.url = urlImage;
            image.Description = descriptionImage;
            image.Largeur = 500;
            image.Longueur = 800;

            var imageNew = await ImageService.Create(image);
            var newImage = imageNew.Data;
            composant.Reference = newImage.ImageId;
        }
        if (typeComposant == "Reference")
        {
            reference.Url = urlReference;
            reference.Description = descriptionReference;

            var referenceNew = await ReferenceService.Create(reference);
            var newReference = referenceNew.Data;
            composant.Reference = newReference.ReferenceId;
        }
        if (typeComposant == "Texte")
        {
            texte.Contenue = contenuTexte;

            var texteNew = await TexteService.Create(texte);
            var newTexte = texteNew.Data;
            composant.Reference = newTexte.TexteFormaterId;
        }
        if (typeComposant == "Video")
        {
            video.Url = urlVideo;
            video.Description = descriptionVideo;
            video.Longueur = 800;
            video.Largeur = 500;

            var videoNew = await VideoService.Create(video);
            var newVideo = videoNew.Data;
            composant.Reference = newVideo.VideoId;
        }

        composant.PageId = await sessionStorage.GetItemAsync<int>("idPage"); ;

        if (composants == null)
        {
            composant.Ordre = 1;
        }
        else
        {
            composant.Ordre = composants.Count() + 1;
        }

        composant.Type = typeComposant;

        await ComposantService.Create(composant);
        var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = composantsRefresh.Data.ToList();
        StateHasChanged();
        await popup.CloseAsync();
    }

    private async Task ChangePageWithNavBar(int id)
    {
        await sessionStorage.SetItemAsync<int>("idPage", id);
        var obj = await PageService.Get(id);
        page = obj.Data;
        CurrentPage = id;
        listComposant.Clear();
        StateHasChanged();
        var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = composantsRefresh.Data.ToList();
        StateHasChanged();
    }

    private async Task AddPage()
    {
        var pageNoeud = await PageService.GetAllFromNoeud(await sessionStorage.GetItemAsync<int>("idNoeud"));
        var create = pageNoeud.Data;

        newPage.NoeudId = await sessionStorage.GetItemAsync<int>("idNoeud");
        newPage.ImportanceId = 1;

        if (create != null && create.Any())  // Vérifiez si la liste n'est pas nulle et qu'elle contient des éléments
        {
            newPage.Ordre = create.Max(p => p.Ordre) + 1;
        }
        else
        {
            newPage.Ordre = 1;
        }

        await PageService.Create(newPage);

        var allPage = await PageService.GetAllFromNoeud(noeud.NoeudId);
        listePage = allPage.Data.ToList();
        StateHasChanged();
    }

    private async void DeletePage()
    {
        var result = await DialogService.Confirm("Êtes-vous sûr de vouloir supprimer cette page?", "Supprimer");

        if (result.HasValue && result.Value)
        {
            //Delete tous les composants
            var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
            var composants = allComposant.Data;

            foreach (var deleteComposant in composants)
            {
                await ComposantService.Delete(deleteComposant.ComposantId);
            }

            //ReOrderPage
            var AllPage = await PageService.Get(await sessionStorage.GetItemAsync<int>("idPage"));
            var livePage = AllPage.Data;

            foreach (var reOrdered in listePage)
            {
                if (livePage.Ordre < reOrdered.Ordre)
                {
                    reOrdered.Ordre = reOrdered.Ordre - 1;
                    await PageService.Update(reOrdered.PageId, reOrdered);
                }
            }

            await PageService.Delete(await sessionStorage.GetItemAsync<int>("idPage"));

            var allPage1 = await PageService.GetAllFromNoeud(noeud.NoeudId);
            listePage = allPage1.Data.ToList();

            if (listePage.Count() == 0)
            {
                NavigationManager.NavigateTo("/Graphe");
            }
            else
            {
                var firstPage = listePage.FirstOrDefault();
                await sessionStorage.SetItemAsync<int>("idPage", firstPage.PageId);
            }
            
            var allPage2 = await PageService.GetAllFromNoeud(noeud.NoeudId);
            listePage = allPage2.Data.ToList();
            StateHasChanged();
            var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
            listComposant = composantsRefresh.Data.ToList();
            StateHasChanged();
        }
        else
        {
            var allPage = await PageService.GetAllFromNoeud(noeud.NoeudId);
            listePage = allPage.Data.ToList();
            var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
            listComposant = composantsRefresh.Data.ToList();
            StateHasChanged();
        }
    }

    private async void NextPage()
    {
        var currentPageId = await sessionStorage.GetItemAsync<int>("idPage");
        var pageNoeud = await PageService.GetAllFromNoeud(await sessionStorage.GetItemAsync<int>("idNoeud"));
        var affichPage = pageNoeud.Data;

        // Trouver la page actuelle
        var currentPage = affichPage.FirstOrDefault(p => p.PageId == currentPageId);

        if (currentPage != null)
        {
            // Trouver la page suivante
            var nextPage = affichPage.FirstOrDefault(p => p.Ordre == currentPage.Ordre + 1);

            if (nextPage != null)
            {
                // Mettre à jour la session avec l'id de la page suivante
                await sessionStorage.SetItemAsync<int>("idPage", nextPage.PageId);
            }
        }

        var obj = await PageService.Get(await sessionStorage.GetItemAsync<int>("idPage"));
        page = obj.Data;
        listComposant.Clear();
        StateHasChanged();
        var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = composantsRefresh.Data.ToList();
        StateHasChanged();
    }

    private async void PreviousPage()
    {
        var currentPageId = await sessionStorage.GetItemAsync<int>("idPage"); ;
        var pageNoeud = await PageService.GetAllFromNoeud(await sessionStorage.GetItemAsync<int>("idNoeud"));
        var affichPage = pageNoeud.Data;

        // Trouver la page actuelle
        var currentPage = affichPage.FirstOrDefault(p => p.PageId == currentPageId);

        if (currentPage != null)
        {
            // Trouver la page précédente
            var previousPage = affichPage.FirstOrDefault(p => p.Ordre == currentPage.Ordre - 1);

            if (previousPage != null)
            {
                // Mettre à jour la session avec l'id de la page précédente
                await sessionStorage.SetItemAsync<int>("idPage", previousPage.PageId);
            }
        }

        var obj = await PageService.Get(await sessionStorage.GetItemAsync<int>("idPage"));
        page = obj.Data;
        listComposant.Clear();
        StateHasChanged();
        var composantsRefresh = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = composantsRefresh.Data.ToList();
        StateHasChanged();
    }

    private async void ChangeComposantOrdreUp(int id)
    {
        // 1. Obtenir le composant que vous souhaitez déplacer vers le haut
        var composantChange = (await ComposantService.Get(id)).Data;

        // 2. Obtenir tous les composants associés à la même page
        var composants = (await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"))).Data;

        // 3. Trouver le composant actuellement à l'ordre désiré
        var composantAChangerPlaceAvec = composants.FirstOrDefault(c => c.Ordre == composantChange.Ordre - 1);

        if (composantAChangerPlaceAvec != null)
        {
            // 4. Échanger les ordres des deux composants
            int tempOrdre = composantChange.Ordre;
            composantChange.Ordre = composantAChangerPlaceAvec.Ordre;
            composantAChangerPlaceAvec.Ordre = tempOrdre;

            // 5. Mettre à jour les composants modifiés dans la base de données
            await ComposantService.Update(id, composantChange);
            await ComposantService.Update(composantAChangerPlaceAvec.ComposantId, composantAChangerPlaceAvec);
        }

        // 8. Rafraîchir la page
        listComposant = new();
        StateHasChanged(); //Fait un flash rapide mais pas trop le choix, fonctionne pas sans
        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = allComposant.Data.ToList();
        StateHasChanged();
    }

    private async void ChangeComposantOrdreDown(int id)
    {
        // 1. Obtenir le composant que vous souhaitez déplacer vers le bas
        var composantChange = (await ComposantService.Get(id)).Data;

        // 2. Obtenir tous les composants associés à la même page
        var composants = (await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"))).Data;

        // 3. Trouver le composant actuellement à l'ordre désiré
        var composantAChangerPlaceAvec = composants.FirstOrDefault(c => c.Ordre == composantChange.Ordre + 1);

        if (composantAChangerPlaceAvec != null)
        {
            // 4. Échanger les ordres des deux composants
            int tempOrdre = composantChange.Ordre;
            composantChange.Ordre = composantAChangerPlaceAvec.Ordre;
            composantAChangerPlaceAvec.Ordre = tempOrdre;

            // 5. Mettre à jour les composants modifiés dans la base de données
            await ComposantService.Update(id, composantChange);
            await ComposantService.Update(composantAChangerPlaceAvec.ComposantId, composantAChangerPlaceAvec);
        }

        // 8. Rafraîchir la page
        listComposant = new();
        StateHasChanged();
        var allComposant = await ComposantService.GetAllById(await sessionStorage.GetItemAsync<int>("idPage"));
        listComposant = allComposant.Data.ToList();
        StateHasChanged();
    }

    void TogglePopup()
    {
        if (popup != null)
        {
            popup.ToggleAsync(button.Element);
        }
    }

    async Task OnOpen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "setTimeout(function(){ document.getElementById('search').focus(); }, 200)");
    }
}
